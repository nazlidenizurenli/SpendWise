from langchain.prompts import PromptTemplate

# Stage 2: Extract structured transactions from cleaned text
deliver_transactions_prompt = PromptTemplate(
    input_variables=["cleaned_text"],
    template="""
You are a transaction builder specialist for Stage 3 of a 3-stage pipeline.
TASK: Augment and finalize the transaction blocks from Stage 2 to match the transaction schema.
INPUT: Clean transaction blocks from Stage 2
OUTPUT: Valid JSON array of transaction objects.

TRANSACTION SCHEMA:
class TransactionBase(BaseModel):
    amount: float 
    description: str 
    category: Optional[str] 
    transaction_type: Literal["income", "expense"] 
    source: Literal["credit", "debit", "savings"] 
    timestamp: Optional[datetime] = None

Schema description:
- amount: Amount corresponding to the transaction. -> Set in Stage 2.
- transaction_type: Literal["income", "expense"] -> Set in Stage 2.
    - income: If the amount is positive and the source is debit or amount is negative and the source is credit.
    - expense: If the amount is negative and the source is debit or amount is positive and the source is credit.
- source: Literal["credit", "debit", "savings"]: Infer from the statement. Should be common for all transactions in the same statement. -> Set in Stage 2.
- timestamp: Optional[datetime] = None: Extract timestamp from the statement. -> Set in Stage 2.
- description: This information should be generatd by you inferred from other fields. Max 100 characters. -> TODO: Clean and augment description to be valid complete English sentence.
- category: Optional[str]: Generated by you inferred from other fields. Max 20 characters. -> TODO: Infer category from description. This is a broad category and should be a single or couple words.

INPUT FROM STAGE 2:
TRANSACTION_START
DATE: 06/23/25
AMOUNT: 5.65
SOURCE: CREDIT_CARD
TRANSACTION_TYPE: EXPENSE
DESCRIPTION: STARBUCKS STORE 63247 SAN JOSE CA
TRANSACTION_END

TRANSACTION_START
DATE: 06/03/25
AMOUNT: -2000.00
SOURCE: CREDIT_CARD
TRANSACTION_TYPE: INCOME
DESCRIPTION: Payment Thank You-Mobile
TRANSACTION_END

EXPECTED OUTPUT FORMAT:
These transaction blocks from stage 2 need to be augmented and finalized to match the transaction schema with json format:
```json
{{
  "amount": float,           // Required - debit expense is negative, credit expens is positive. debit income is positive, credit income is negative.
  "description": string,     // Required - clean merchant/description 
  "category": string,        // Required - infer from merchant (Food, Transportation, etc.)
  "transaction_type": string, // Required - "income" or "expense"
  "source": string,          // Required - "credit", "debit", or "savings" 
  "timestamp": string        // Required - ISO format YYYY-MM-DDTHH:MM:SS
}}
```

FORMATTING RULES:
- Date from stage 2 should be converted to ISO format YYYY-MM-DDTHH:MM:SS
- Amount from stage 2 should be converted to float
- Description from stage 2 should be cleaned and augmented to be a valid complete English sentence.
- Category section missing in stage 2 should be inferred from description, added in the json and should be a single or couple words.
- Transaction type from stage 2 should be included in the json.
- Source from stage 2 should be formatted as "credit", "debit", or "savings"
- Do not change data coming from stage 2. Only format it to match the schema and augment the description and category sections.

OUTPUT FORMAT:
Return ONLY a valid JSON array, no other text:

CLEANED TEXT TO PROCESS:
{cleaned_text}
"""
)

